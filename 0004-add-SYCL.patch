From cf3f5a0dd38e69c378196f681992dd7387226940 Mon Sep 17 00:00:00 2001
From: wangyon1 <yong4.wang@intel.com>
Date: Fri, 5 Feb 2021 09:56:45 +0800
Subject: [PATCH 4/4] add SYCL

---
 src/SupraLib/Beamformer/Beamformer.cpp        |  2 +-
 src/SupraLib/Beamformer/BeamformingNode.cpp   | 12 ++--
 src/SupraLib/Beamformer/BeamformingNode.h     |  6 +-
 ...merCuda.dp.cpp => RxBeamformerSYCL.dp.cpp} | 56 ++++++-------------
 ...{RxBeamformerCuda.h => RxBeamformerSYCL.h} | 12 ++--
 src/SupraLib/CMakeLists.txt                   |  4 +-
 6 files changed, 36 insertions(+), 56 deletions(-)
 rename src/SupraLib/Beamformer/{RxBeamformerCuda.dp.cpp => RxBeamformerSYCL.dp.cpp} (92%)
 rename src/SupraLib/Beamformer/{RxBeamformerCuda.h => RxBeamformerSYCL.h} (91%)

diff --git a/src/SupraLib/Beamformer/Beamformer.cpp b/src/SupraLib/Beamformer/Beamformer.cpp
index e83a29d..5489c7f 100644
--- a/src/SupraLib/Beamformer/Beamformer.cpp
+++ b/src/SupraLib/Beamformer/Beamformer.cpp
@@ -13,7 +13,7 @@
 // ================================================================================================
 
 #include "Beamformer.h"
-#include "RxBeamformerCuda.h"
+#include "RxBeamformerSYCL.h"
 
 #include <exception>
 #include <cassert>
diff --git a/src/SupraLib/Beamformer/BeamformingNode.cpp b/src/SupraLib/Beamformer/BeamformingNode.cpp
index 5a49f7a..6b79102 100644
--- a/src/SupraLib/Beamformer/BeamformingNode.cpp
+++ b/src/SupraLib/Beamformer/BeamformingNode.cpp
@@ -13,7 +13,7 @@
 
 #include "USImage.h"
 #include "USRawData.h"
-#include "RxBeamformerCuda.h"
+#include "RxBeamformerSYCL.h"
 
 #include <utilities/Logging.h>
 #include <algorithm>
@@ -146,7 +146,7 @@ namespace supra
 				}
 				if (needNewBeamformer)
 				{
-					m_beamformer = std::make_shared<RxBeamformerCuda>(*m_lastSeenBeamformerParameters);
+					m_beamformer = std::make_shared<RxBeamformerSYCL>(*m_lastSeenBeamformerParameters);
 				}
 
 				switch (pRawData->getDataType())
@@ -200,18 +200,18 @@ namespace supra
 	void BeamformingNode::readBeamformerType()
 	{
 		string beamformer = m_configurationDictionary.get<string>("beamformerType");
-		m_beamformerType = RxBeamformerCuda::DelayAndSum;
+		m_beamformerType = RxBeamformerSYCL::DelayAndSum;
 		if (beamformer == "DelayAndSum")
 		{
-			m_beamformerType = RxBeamformerCuda::DelayAndSum;
+			m_beamformerType = RxBeamformerSYCL::DelayAndSum;
 		}
 		else if (beamformer == "DelayAndStdDev")
 		{
-			m_beamformerType = RxBeamformerCuda::DelayAndStdDev;
+			m_beamformerType = RxBeamformerSYCL::DelayAndStdDev;
 		}
 		else if (beamformer == "TestSignal")
 		{
-			m_beamformerType = RxBeamformerCuda::TestSignal;
+			m_beamformerType = RxBeamformerSYCL::TestSignal;
 		}
 	}
 
diff --git a/src/SupraLib/Beamformer/BeamformingNode.h b/src/SupraLib/Beamformer/BeamformingNode.h
index 314eb24..72b0109 100644
--- a/src/SupraLib/Beamformer/BeamformingNode.h
+++ b/src/SupraLib/Beamformer/BeamformingNode.h
@@ -24,7 +24,7 @@
 #include "RecordObject.h"
 #include "SyncRecordObject.h"
 #include "RxBeamformerParameters.h"
-#include "RxBeamformerCuda.h"
+#include "RxBeamformerSYCL.h"
 
 namespace supra
 {
@@ -67,7 +67,7 @@ namespace supra
 		void readBeamformerType();
 		void updateImageProperties(std::shared_ptr<const USImageProperties> imageProperties);
 
-		std::shared_ptr<RxBeamformerCuda> m_beamformer;
+		std::shared_ptr<RxBeamformerSYCL> m_beamformer;
 		std::shared_ptr<const RxBeamformerParameters> m_lastSeenBeamformerParameters;
 
 		std::shared_ptr<const USImageProperties> m_lastSeenImageProperties;
@@ -81,7 +81,7 @@ namespace supra
 		double m_windowParameter;
 		double m_speedOfSoundMMperS;
 		DataType m_outputType;
-		RxBeamformerCuda::RxSampleBeamformer m_beamformerType;
+		RxBeamformerSYCL::RxSampleBeamformer m_beamformerType;
 		bool m_interpolateTransmits;
 		int32_t m_additionalOffset;
 	};
diff --git a/src/SupraLib/Beamformer/RxBeamformerCuda.dp.cpp b/src/SupraLib/Beamformer/RxBeamformerSYCL.dp.cpp
similarity index 92%
rename from src/SupraLib/Beamformer/RxBeamformerCuda.dp.cpp
rename to src/SupraLib/Beamformer/RxBeamformerSYCL.dp.cpp
index 7c7a4b7..f9ac5f7 100644
--- a/src/SupraLib/Beamformer/RxBeamformerCuda.dp.cpp
+++ b/src/SupraLib/Beamformer/RxBeamformerSYCL.dp.cpp
@@ -10,7 +10,7 @@
 // ================================================================================================
 #include <CL/sycl.hpp>
 #include <dpct/dpct.hpp>
-#include "RxBeamformerCuda.h"
+#include "RxBeamformerSYCL.h"
 #include "USImage.h"
 #include "USRawData.h"
 #include "RxSampleBeamformerDelayAndSum.h"
@@ -23,7 +23,7 @@
 //TODO ALL ELEMENT/SCANLINE Y positons are actually Z! Change all variable names accordingly
 namespace supra
 {
-	RxBeamformerCuda::RxBeamformerCuda(const RxBeamformerParameters & parameters)
+	RxBeamformerSYCL::RxBeamformerSYCL(const RxBeamformerParameters & parameters)
 		: m_windowFunction(nullptr)
 	{
   
@@ -47,11 +47,11 @@ namespace supra
 		m_pRxElementYs = std::unique_ptr<Container<LocationType>>(new Container<LocationType>(LocationGpu, &q_ct1, parameters.getRxElementYs()));
 	}
 
-	RxBeamformerCuda::~RxBeamformerCuda()
+	RxBeamformerSYCL::~RxBeamformerSYCL()
 	{
 	}
 
-	void RxBeamformerCuda::convertToDtSpace(double dt, double speedOfSoundMMperS, size_t numTransducerElements) const
+	void RxBeamformerSYCL::convertToDtSpace(double dt, double speedOfSoundMMperS, size_t numTransducerElements) const
 	{
 		if (m_lastSeenDt != dt || m_speedOfSoundMMperS != speedOfSoundMMperS)
 		{
@@ -387,7 +387,7 @@ namespace supra
 
 
 	template <class SampleBeamformer, unsigned int maxWindowFunctionNumel, typename RFType, typename ResultType, typename LocationType>
-	void rxBeamformingDTspaceCuda3D(bool interpolateRFlines, bool interpolateBetweenTransmits, size_t numTransducerElements, vec2s elementLayout, size_t numReceivedChannels, size_t numTimesteps,
+	void rxBeamformingDTspaceSYCL3D(bool interpolateRFlines, bool interpolateBetweenTransmits, size_t numTransducerElements, vec2s elementLayout, size_t numReceivedChannels, size_t numTimesteps,
 									const RFType* RF, size_t numTxScanlines, size_t numRxScanlines, const ScanlineRxParameters3D* scanlines, size_t numZs, const LocationType* zs,
 									const LocationType* x_elems, const LocationType* y_elems, LocationType speedOfSound, LocationType dt, uint32_t additionalOffset, LocationType F,
 									const WindowFunctionGpu windowFunction, sycl::queue* stream, ResultType* s)
@@ -474,7 +474,7 @@ namespace supra
 	}
 
 	template <class SampleBeamformer, typename RFType, typename ResultType, typename LocationType>
-	void rxBeamformingDTspaceCuda(bool interpolateRFlines, bool interpolateBetweenTransmits, size_t numTransducerElements, size_t numReceivedChannels, size_t numTimesteps, const RFType* RF,
+	void rxBeamformingDTspaceSYCL(bool interpolateRFlines, bool interpolateBetweenTransmits, size_t numTransducerElements, size_t numReceivedChannels, size_t numTimesteps, const RFType* RF,
 								  size_t numTxScanlines, size_t numRxScanlines, const ScanlineRxParameters3D* scanlines, size_t numZs, const LocationType* zs, const LocationType* x_elems,
 								  LocationType speedOfSound, LocationType dt, uint32_t additionalOffset, LocationType F, const WindowFunctionGpu windowFunction, sycl::queue* stream, ResultType* s, LocationType *mdataGpu)
 	{
@@ -540,8 +540,8 @@ namespace supra
 	}
 
 	template <typename ChannelDataType, typename ImageDataType>
-	shared_ptr<USImage> RxBeamformerCuda::performRxBeamforming(
-		RxBeamformerCuda::RxSampleBeamformer sampleBeamformer,
+	shared_ptr<USImage> RxBeamformerSYCL::performRxBeamforming(
+		RxBeamformerSYCL::RxSampleBeamformer sampleBeamformer,
 		shared_ptr<const USRawData> rawData,
 		double fNumber,
 		double speedOfSoundMMperS,
@@ -573,29 +573,9 @@ namespace supra
 		});
 		gRawData->getStream()->wait();
 
-		auto beamformingFunction3D = &rxBeamformingDTspaceCuda3D<RxSampleBeamformerDelayAndSum, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
-		auto beamformingFunction2D = &rxBeamformingDTspaceCuda<RxSampleBeamformerDelayAndSum, ChannelDataType, ImageDataType, LocationType>;
+		auto beamformingFunction3D = &rxBeamformingDTspaceSYCL3D<RxSampleBeamformerDelayAndSum, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
+		auto beamformingFunction2D = &rxBeamformingDTspaceSYCL<RxSampleBeamformerDelayAndSum, ChannelDataType, ImageDataType, LocationType>;
 		
-		// We don't use DelayAndStdDev and TestSignal algorthm, so below code are commented.
-		/*switch (sampleBeamformer)
-		{
-		case DelayAndSum:
-			beamformingFunction3D = &rxBeamformingDTspaceCuda3D<RxSampleBeamformerDelayAndSum, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
-			beamformingFunction2D = &rxBeamformingDTspaceCuda<RxSampleBeamformerDelayAndSum, ChannelDataType, ImageDataType, LocationType>;
-			break;
-		case DelayAndStdDev:
-			beamformingFunction3D = &rxBeamformingDTspaceCuda3D<RxSampleBeamformerDelayAndStdDev, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
-			beamformingFunction2D = &rxBeamformingDTspaceCuda<RxSampleBeamformerDelayAndStdDev, ChannelDataType, ImageDataType, LocationType>;
-			break;
-		case TestSignal:
-			beamformingFunction3D = &rxBeamformingDTspaceCuda3D<RxSampleBeamformerTestSignal, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
-			beamformingFunction2D = &rxBeamformingDTspaceCuda<RxSampleBeamformerTestSignal, ChannelDataType, ImageDataType, LocationType>;
-			break;
-		case INVALID:
-		default:
-			beamformingFunction3D = &rxBeamformingDTspaceCuda3D<RxSampleBeamformerDelayAndSum, m_windowFunctionNumEntries, ChannelDataType, ImageDataType, LocationType>;
-			beamformingFunction2D = &rxBeamformingDTspaceCuda<RxSampleBeamformerDelayAndSum, ChannelDataType, ImageDataType, LocationType>;
-		}*/
 
 
 		convertToDtSpace(dt, speedOfSoundMMperS, rawData->getNumElements());
@@ -669,8 +649,8 @@ namespace supra
 	}
 
 	template
-	shared_ptr<USImage> RxBeamformerCuda::performRxBeamforming<int16_t, int16_t>(
-		RxBeamformerCuda::RxSampleBeamformer sampleBeamformer,
+	shared_ptr<USImage> RxBeamformerSYCL::performRxBeamforming<int16_t, int16_t>(
+		RxBeamformerSYCL::RxSampleBeamformer sampleBeamformer,
 		shared_ptr<const USRawData> rawData,
 		double fNumber,
 		double speedOfSoundMMperS,
@@ -679,8 +659,8 @@ namespace supra
 		bool interpolateBetweenTransmits,
 		int32_t additionalOffset) const;
 	template
-	shared_ptr<USImage> RxBeamformerCuda::performRxBeamforming<int16_t, float>(
-		RxBeamformerCuda::RxSampleBeamformer sampleBeamformer,
+	shared_ptr<USImage> RxBeamformerSYCL::performRxBeamforming<int16_t, float>(
+		RxBeamformerSYCL::RxSampleBeamformer sampleBeamformer,
 		shared_ptr<const USRawData> rawData,
 		double fNumber,
 		double speedOfSoundMMperS,
@@ -689,8 +669,8 @@ namespace supra
 		bool interpolateBetweenTransmits,
 		int32_t additionalOffset) const;
 	template
-	shared_ptr<USImage> RxBeamformerCuda::performRxBeamforming<float, int16_t>(
-		RxBeamformerCuda::RxSampleBeamformer sampleBeamformer,
+	shared_ptr<USImage> RxBeamformerSYCL::performRxBeamforming<float, int16_t>(
+		RxBeamformerSYCL::RxSampleBeamformer sampleBeamformer,
 		shared_ptr<const USRawData> rawData,
 		double fNumber,
 		double speedOfSoundMMperS,
@@ -699,8 +679,8 @@ namespace supra
 		bool interpolateBetweenTransmits,
 		int32_t additionalOffset) const;
 	template
-	shared_ptr<USImage> RxBeamformerCuda::performRxBeamforming<float, float>(
-		RxBeamformerCuda::RxSampleBeamformer sampleBeamformer,
+	shared_ptr<USImage> RxBeamformerSYCL::performRxBeamforming<float, float>(
+		RxBeamformerSYCL::RxSampleBeamformer sampleBeamformer,
 		shared_ptr<const USRawData> rawData,
 		double fNumber,
 		double speedOfSoundMMperS,
diff --git a/src/SupraLib/Beamformer/RxBeamformerCuda.h b/src/SupraLib/Beamformer/RxBeamformerSYCL.h
similarity index 91%
rename from src/SupraLib/Beamformer/RxBeamformerCuda.h
rename to src/SupraLib/Beamformer/RxBeamformerSYCL.h
index 5d9f3cf..495f030 100644
--- a/src/SupraLib/Beamformer/RxBeamformerCuda.h
+++ b/src/SupraLib/Beamformer/RxBeamformerSYCL.h
@@ -9,8 +9,8 @@
 // 
 // ================================================================================================
 
-#ifndef __RXBEAMFORMERCUDA_H__
-#define __RXBEAMFORMERCUDA_H__
+#ifndef __RXBEAMFORMERSYCL_H__
+#define __RXBEAMFORMERSYCL_H__
 
 #include "USImage.h"
 #include "WindowFunction.h"
@@ -25,7 +25,7 @@ namespace supra
 
 	using std::shared_ptr;
 
-	class RxBeamformerCuda
+	class RxBeamformerSYCL
 	{
 	public:
 		enum RxSampleBeamformer {
@@ -35,8 +35,8 @@ namespace supra
 			INVALID
 		};
 
-		RxBeamformerCuda(const RxBeamformerParameters& parameters);
-		~RxBeamformerCuda();
+		RxBeamformerSYCL(const RxBeamformerParameters& parameters);
+		~RxBeamformerSYCL();
 
 		// perform the receive beamforming
 		template <typename ChannelDataType, typename ImageDataType>
@@ -78,4 +78,4 @@ namespace supra
 	};
 }
 
-#endif //!__RXBEAMFORMERCUDA_H__
+#endif //!__RXBEAMFORMERSYCL_H__
diff --git a/src/SupraLib/CMakeLists.txt b/src/SupraLib/CMakeLists.txt
index a2472b9..56a7f6a 100644
--- a/src/SupraLib/CMakeLists.txt
+++ b/src/SupraLib/CMakeLists.txt
@@ -193,14 +193,14 @@ IF(SUPRA_BEAMFORMER)
 		InputOutput/UltrasoundInterfaceRawDataMock.cpp
 		InputOutput/UltrasoundInterfaceBeamformedMock.cpp)
 	SET(SUPRA_Lib_CUDASOURCE ${SUPRA_Lib_CUDASOURCE}
-		Beamformer/RxBeamformerCuda.dp.cpp
+		Beamformer/RxBeamformerSYCL.dp.cpp
 		Beamformer/HilbertFirEnvelope.dp.cpp
 		Beamformer/LogCompressor.dp.cpp
 		Beamformer/ScanConverter.dp.cpp)
 	SET(SUPRA_Lib_HEADERS ${SUPRA_Lib_HEADERS}
 		Beamformer/Sequencer.h
 		Beamformer/Beamformer.h
-		Beamformer/RxBeamformerCuda.h
+		Beamformer/RxBeamformerSYCL.h
 		Beamformer/RxBeamformerCommon.h
 		Beamformer/RxSampleBeamformerDelayAndSum.h
 		Beamformer/RxSampleBeamformerDelayAndStdDev.h
-- 
2.17.1

